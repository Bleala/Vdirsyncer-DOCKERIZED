name: Vdirsyncer Deployment Development
run-name: Vdirsyncer Deployment For Development Usage ðŸš€
on:
  push:
    branches:
      - "dev"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag (optional, defaults to dev)'
        required: true
        default: 'dev'
        type: string
      branch:
        description: 'Custom branch (optional, defaults to dev)'
        required: true
        default: 'dev'
        type: string 

env:
  IMAGE_NAME: vdirsyncer
  REGISTRY_DOCKERHUB: ${{ vars.REGISTRY_DOCKERHUB }}
  REGISTRY_GITHUB: ${{ vars.REGISTRY_GITHUB }}
  REGISTRY_GITEA: ${{ secrets.REGISTRY_GITEA }}
  USERNAME_DOCKERHUB: ${{ vars.USERNAME_DOCKERHUB }}
  USERNAME_GITHUB: ${{ vars.USERNAME_GITHUB }}
  USERNAME_GITEA: ${{ vars.USERNAME_GITEA }}

jobs:
  Vdirsyncer-Deployment-Development:
    name: Vdirsyncer Deployment Development
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Check Out Repository Code
        id: checkout
        uses: actions/checkout@v4.2.2

      # https://github.com/marketplace/actions/hadolint-action
      - name: Lint Dockerfile
        id: dockerfile-linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./docker/Dockerfile

      # https://github.com/marketplace/actions/shell-linter
      - name: Lint Shell Scripts
        id: shell-linter
        uses: Azbagheri/shell-linter@v0.8.0
        with:
          exclude-paths: "LICENSE,docker/Dockerfile"

      # https://github.com/marketplace/actions/docker-hub-description
      - name: Docker Hub Description
        id: dockerhub-description
        uses: peter-evans/dockerhub-description@v4.0.2
        with:
          username: ${{ env.USERNAME_DOCKERHUB }}
          password: ${{ secrets.TOKEN_DOCKERHUB }}
          repository: ${{ env.USERNAME_DOCKERHUB }}/${{ env.IMAGE_NAME }}
          short-description: "Vdirsyncer - sync calendars and addressbooks between servers and the local filesystem. DOCKERIZED!"

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Docker Metadata (Tagging)
        id: metadata
        uses: docker/metadata-action@v5.7.0
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.USERNAME_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GITEA }}/${{ env.USERNAME_GITEA }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=dev

      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set Up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3.6.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set Up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3.10.0

      # https://github.com/marketplace/actions/docker-login
      - name: Login To Docker Hub
        id: docker-login-dockerhub
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ env.USERNAME_DOCKERHUB }}
          password: ${{ secrets.TOKEN_DOCKERHUB }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login To GitHub Container Registry
        id: docker-login-ghcr
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ env.USERNAME_GITHUB }}
          password: ${{ secrets.TOKEN_GITHUB }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login To Gitea
        id: docker-login-gitea
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY_GITEA }}
          username: ${{ env.USERNAME_GITEA }}
          password: ${{ secrets.TOKEN_GITEA }}

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build And Push Pre Release Dev Image For Scanning
        id: build-and-push-pre-release-dev
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./docker
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          sbom: false
          tags: ${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:pre-release-dev
          cache-from: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:buildcache,mode=max

      # Set up Tricy and scan pre-release-dev image from Registry
      # Normal GitHub Action does not work with Gitea Actions, because Trivy wants to login to GitHub
      # https://github.com/marketplace/actions/aqua-security-trivy
      - name: Install Trivy And Scan Image For Vulnerabilities
        id: trivy-scan
        run: |
          # Schritt 1: Trivy-Binary installieren
          # Wir laden die neueste Version direkt herunter
          export TRIVY_VERSION=$(curl -s "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo "Installing Trivy version: $TRIVY_VERSION"
          curl -sL "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.deb" -o trivy.deb
          sudo dpkg -i trivy.deb

          # Schritt 2: Trivy-Scan mit exakt deinen gewÃ¼nschten Parametern ausfÃ¼hren
          # Der Befehl ist: trivy image [optionen] [image-name]
          trivy image \
            --format table \
            --exit-code 1 \
            --ignore-unfixed \
            --pkg-types os,library \
            --severity CRITICAL,HIGH \
            ${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:pre-release-dev

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build And Push Final Dev Image
        id: build-and-push-final-dev
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./docker
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          sbom: false
          tags: |
            ${{ steps.metadata.outputs.tags }}
          cache-from: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:buildcache,mode=max

      # https://github.com/marketplace/actions/ghcr-io-cleanup-action
      - name: GHCR Clean Up 'pre-release-dev' Image Tag
        id: ghcr-clean-up-pre-release-dev
        uses: dataaxiom/ghcr-cleanup-action@v1.0.16
        if: always()
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          owner: ${{ env.USERNAME_GITHUB }}
          packages: ${{ env.IMAGE_NAME }}
          delete-tags: pre-release-dev
          # delete-untagged: true
          keep-n-untagged: 10

      # https://github.com/niniyas/ntfy-action
      - name: Ntfy Notification
        id: ntfy-notification
        uses: niniyas/ntfy-action@V1.0.5
        if: always()  # Wird immer ausgefÃ¼hrt, egal ob success, failure oder cancelled
        env:
          STATUS: ${{ job.status }}
        with:
          url: '${{ secrets.NTFY_URL }}'
          topic: '${{ secrets.NTFY_TOPIC }}'
          tags: ${{ env.STATUS == 'success' && '+1,partying_face,tada,action,successfully,completed' || env.STATUS == 'failure' && '-1,no_entry,skull,action,failed' || env.STATUS == 'cancelled' && '-1,cry,triangular_flag_on_post,action,cancelled' }}
          title: "Gitea Actions ${{ env.STATUS == 'success' && 'erfolgreich' || env.STATUS == 'failure' && 'fehlgeschlagen' || env.STATUS == 'cancelled' && 'abgebrochen' }}: ${{ env.GITHUB_REPOSITORY }} | ${{ env.GITHUB_REF_NAME }}"
          priority: ${{ env.STATUS == 'success' && 3 || 5 }}
          details: "Gitea Actions Workflow ${{ env.STATUS == 'success' && 'ist erfolgreich abgeschlossen.' || env.STATUS == 'failure' && 'ist fehlgeschlagen!' || env.STATUS == 'cancelled' && 'wurde abgebrochen!' }}"
          # Bearer Header notwendig in JSON --> https://docs.ntfy.sh/publish/#access-tokens
          headers: '${{ secrets.NTFY_HEADERS }}'
          actions: '[{"action": "view", "label": "Gitea Ã¶ffnen", "url": "${{ secrets.GIT_URL }}/${{ env.GITHUB_REPOSITORY }}/actions", "clear": true}]'
          icon: 'https://w7.pngwing.com/pngs/940/571/png-transparent-gitea-hd-logo.png'
          image: true
