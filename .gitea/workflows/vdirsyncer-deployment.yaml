---
name: Vdirsyncer Deployment Production üöÄ
run-name: Vdirsyncer Deployment For Production Usage üöÄ
on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify the version to build and tag (default: 2.5.8)'
        required: false
        default: '2.5.8'
        type: string
      source:
        description: 'Specify the branch/tag to build from (default: main)'
        required: false
        default: 'main'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  BUILDCACHE_NAME: ${{ vars.BUILDCACHE_NAME }}
  DOCKERFILE_PATH: ${{ vars.DOCKERFILE_PATH }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  PLATFORMS_TO_BUILD: ${{ vars.PLATFORMS_TO_BUILD }}
  REGISTRY_DOCKERHUB: ${{ vars.REGISTRY_DOCKERHUB }}
  REGISTRY_GITHUB: ${{ vars.REGISTRY_GITHUB }}
  REGISTRY_QUAY: ${{ vars.REGISTRY_QUAY }}
  SHELLCHECK_EXCLUDE_PATHS: ${{ vars.SHELLCHECK_EXCLUDE_PATHS }}
  USERNAME_DOCKERHUB: ${{ vars.USERNAME_DOCKERHUB }}
  USERNAME_GITHUB: ${{ vars.USERNAME_GITHUB }}
  USERNAME_GITEA: ${{ vars.USERNAME_GITEA }}
  USERNAME_QUAY: ${{ vars.USERNAME_QUAY }}

jobs:
  Vdirsyncer-Deployment-Production:
    name: Vdirsyncer Deployment Production üöÄ
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Check Out Repository Code üõí
        id: checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # use custom branch/tag on workflow_dispatch event, otherwise use github.ref
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.source || github.ref }}

      # https://github.com/marketplace/actions/hadolint-action
      - name: Lint Dockerfile üê≥üìÑüîç
        id: dockerfile-linter
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: ${{ env.DOCKERFILE_PATH }}

      # https://github.com/marketplace/actions/shell-linter
      - name: Lint Shell Scripts üìúüîç
        id: shell-linter
        uses: Azbagheri/shell-linter@30a9cf3f6cf25c08fc98f10d7dc4167f7b5c0c00 # v0.8.0
        with:
          exclude-paths: ${{ env.SHELLCHECK_EXCLUDE_PATHS }}

      # https://github.com/marketplace/actions/docker-hub-description
      - name: Docker Hub Description üê≥üìù
        id: dockerhub-description
        uses: peter-evans/dockerhub-description@432a30c9e07499fd01da9f8a49f0faf9e0ca5b77 # v4.0.2
        with:
          username: ${{ env.USERNAME_DOCKERHUB }}
          password: ${{ secrets.TOKEN_DOCKERHUB }}
          repository: ${{ env.USERNAME_DOCKERHUB }}/${{ env.IMAGE_NAME }}
          short-description: "Vdirsyncer - sync calendars and addressbooks between servers and the local filesystem. DOCKERIZED!"

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Docker Metadata (Tagging) üè∑Ô∏è
        id: metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.USERNAME_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ secrets.REGISTRY_GITEA }}/${{ env.USERNAME_GITEA }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_QUAY }}/${{ env.USERNAME_QUAY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          # generate Docker tags based on the following events/attributes
          # use custom tag on workflow_dispatch event or use pushed tag
          tags: |
            type=semver,pattern={{version}},value=${{ github.event.inputs.tag || '' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.inputs.tag || '' }}
            type=semver,pattern={{major}},value=${{ github.event.inputs.tag || '' }}

      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set Up QEMU üõ†Ô∏è
        id: setup-qemu
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set Up Docker Buildx üê≥üß±
        id: setup-buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      # https://github.com/marketplace/actions/cosign-installer
      - name: Set Up Cosign ‚úçÔ∏è
        id: setup-cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      # https://github.com/marketplace/actions/docker-login
      - name: Login To Docker Hub üîëüê≥
        id: docker-login-dockerhub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ env.USERNAME_DOCKERHUB }}
          password: ${{ secrets.TOKEN_DOCKERHUB }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login To Gitea üîëüåê
        id: docker-login-gitea
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ secrets.REGISTRY_GITEA }}
          username: ${{ env.USERNAME_GITEA }}
          password: ${{ secrets.TOKEN_GITEA }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login To GitHub Container Registry üîëüì¶
        id: docker-login-ghcr
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ env.USERNAME_GITHUB }}
          password: ${{ secrets.TOKEN_GITHUB }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login To Quay.io üîëüåê
        id: docker-login-quay
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY_QUAY }}
          username: ${{ secrets.USERNAME_QUAY_ROBOT }}
          password: ${{ secrets.TOKEN_QUAY }}

      # Prepare build arguments, including a dynamic BUILD_DATE
      - name: Prepare Build Arguments üõ†Ô∏è
        id: prepare-build-args
        run: |
          # Create dynamic timestamp for BUILD_DATE
          BUILD_DATE_VALUE="UTC-$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          # Get static build arguments from input
          STATIC_ARGS="${{ env.BUILD_ARGS }}"

          # Combine static args with dynamic BUILD_DATE, if static args exist
          if [ -n "$STATIC_ARGS" ]
          then
            # If static arguments exist, append BUILD_DATE
            echo "final_build_args=BUILD_DATE=${BUILD_DATE_VALUE},${STATIC_ARGS}" >> "$GITHUB_OUTPUT"
          # Just set BUILD_DATE if no static args exist
          else
            # If no static arguments, only set BUILD_DATE
            echo "final_build_args=BUILD_DATE=${BUILD_DATE_VALUE}" >> "$GITHUB_OUTPUT"
          fi

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build And Push Pre Release Image For Scanning üèóÔ∏èüî¨
        id: build-and-push-pre-release
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          build-args: ${{ steps.prepare-build-args.outputs.final_build_args }}
          context: ./docker
          platforms: ${{ env.PLATFORMS_TO_BUILD }}
          push: true
          provenance: false
          sbom: false
          tags: ${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:pre-release
          cache-from: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.BUILDCACHE_NAME}}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.BUILDCACHE_NAME}}:buildcache,mode=max

      # Set up Tricy and scan pre-release-dev image from Registry
      # Normal GitHub Action does not work with Gitea Actions, because Trivy wants to login to GitHub
      # https://github.com/marketplace/actions/aqua-security-trivy
      - name: Install Trivy And Scan Image For Vulnerabilities üõ°Ô∏èüîç
        id: trivy-scan
        run: |
          # Schritt 1: Trivy-Binary installieren
          # Wir laden die neueste Version direkt herunter
          TRIVY_VERSION=$(curl -s "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          export TRIVY_VERSION
          echo "Installing Trivy version: $TRIVY_VERSION"
          curl -sL "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.deb" -o trivy.deb
          sudo dpkg -i trivy.deb

          # Schritt 2: Trivy-Scan mit exakt deinen gew√ºnschten Parametern ausf√ºhren
          # Der Befehl ist: trivy image [optionen] [image-name]
          trivy image \
            --format table \
            --exit-code 1 \
            --ignore-unfixed \
            --pkg-types os,library \
            --severity CRITICAL,HIGH \
            --scanners vuln,secret \
            ${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.IMAGE_NAME}}:pre-release

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build And Push Final Image ‚úÖüê≥
        id: build-and-push-final
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          build-args: ${{ steps.prepare-build-args.outputs.final_build_args }}
          context: ./docker
          platforms: ${{ env.PLATFORMS_TO_BUILD }}
          push: true
          provenance: false
          sbom: false
          tags: |
            ${{ steps.metadata.outputs.tags }}
          cache-from: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.BUILDCACHE_NAME}}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB}}/${{ env.BUILDCACHE_NAME}}:buildcache,mode=max

      # https://github.com/marketplace/actions/cosign-installer
      - name: Sign The Final Docker Prod Image (Static Key) ‚úçÔ∏èüîí
        id: sign-with-cosign
        env:
          TAGS: ${{ steps.metadata.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push-final.outputs.digest }}
        run: |
          IMAGES_TO_SIGN=(
            "${{ env.REGISTRY_DOCKERHUB }}/${{ env.USERNAME_DOCKERHUB }}/${{ env.IMAGE_NAME }}@${{ env.DIGEST }}"
            "${{ env.REGISTRY_GITHUB }}/${{ env.USERNAME_GITHUB }}/${{ env.IMAGE_NAME }}@${{ env.DIGEST }}"
            "${{ env.REGISTRY_QUAY }}/${{ env.USERNAME_QUAY }}/${{ env.IMAGE_NAME }}@${{ env.DIGEST }}"
            "${{ secrets.REGISTRY_GITEA }}/${{ env.USERNAME_GITEA }}/${{ env.IMAGE_NAME }}@${{ env.DIGEST }}"
          )

          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${IMAGES_TO_SIGN[@]}"

      # https://github.com/marketplace/actions/ghcr-io-cleanup-action
      - name: GHCR Clean Up 'pre-release' Image Tag üßπüè∑Ô∏è
        id: ghcr-clean-up-pre-release
        uses: dataaxiom/ghcr-cleanup-action@cd0cdb900b5dbf3a6f2cc869f0dbb0b8211f50c4 # v1.0.16
        if: always()
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          owner: ${{ env.USERNAME_GITHUB }}
          packages: ${{ env.IMAGE_NAME }}
          delete-tags: pre-release
          delete-untagged: true

      # https://github.com/marketplace/actions/ghcr-io-cleanup-action
      - name: GHCR Clean Up 'buildcache' Image Tag üßπüè∑Ô∏è
        id: ghcr-clean-up-buildcache
        uses: dataaxiom/ghcr-cleanup-action@cd0cdb900b5dbf3a6f2cc869f0dbb0b8211f50c4 # v1.0.16
        if: always()
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          owner: ${{ env.USERNAME_GITHUB }}
          packages: ${{ env.BUILDCACHE_NAME }}
          exclude-tags: buildcache
          keep-n-untagged: 20

      # https://github.com/niniyas/ntfy-action
      - name: Ntfy Notification üîî
        id: ntfy-notification
        uses: niniyas/ntfy-action@2ebc39afb288e8b01804a6ec1be0db2e7a458387 # v1.0.5
        if: always()  # Wird immer ausgef√ºhrt, egal ob success, failure oder cancelled
        env:
          STATUS: ${{ job.status }}
        with:
          url: '${{ secrets.NTFY_URL }}'
          topic: '${{ secrets.NTFY_TOPIC }}'
          tags: ${{ env.STATUS == 'success' && '+1,partying_face,tada,action,successfully,completed' || env.STATUS == 'failure' && '-1,no_entry,skull,action,failed' || env.STATUS == 'cancelled' && '-1,cry,triangular_flag_on_post,action,cancelled' }}
          title: "Gitea Actions ${{ env.STATUS == 'success' && 'erfolgreich' || env.STATUS == 'failure' && 'fehlgeschlagen' || env.STATUS == 'cancelled' && 'abgebrochen' }}: ${{ env.GITHUB_REPOSITORY }} | ${{ env.GITHUB_REF_NAME }}"
          priority: ${{ env.STATUS == 'success' && 3 || 5 }}
          details: "Gitea Actions Workflow ${{ env.STATUS == 'success' && 'ist erfolgreich abgeschlossen.' || env.STATUS == 'failure' && 'ist fehlgeschlagen!' || env.STATUS == 'cancelled' && 'wurde abgebrochen!' }}"
          # Bearer Header notwendig in JSON --> https://docs.ntfy.sh/publish/#access-tokens
          headers: '${{ secrets.NTFY_HEADERS }}'
          actions: '[{"action": "view", "label": "Gitea √∂ffnen", "url": "${{ secrets.GIT_URL }}/${{ env.GITHUB_REPOSITORY }}/actions", "clear": true}]'
          icon: 'https://w7.pngwing.com/pngs/940/571/png-transparent-gitea-hd-logo.png'
          image: true
